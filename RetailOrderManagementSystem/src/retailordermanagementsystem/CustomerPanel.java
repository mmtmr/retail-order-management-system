/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package retailordermanagementsystem;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import static retailordermanagementsystem.Operation.OrdList;
import static retailordermanagementsystem.Operation.ProList;
import static retailordermanagementsystem.Operation.opCus;
import static retailordermanagementsystem.Operation.opUser;
import static retailordermanagementsystem.Validation.validateCustomerInput;

/**
 *
 * @author Maxine
 */
public class CustomerPanel extends javax.swing.JFrame {

    /**
     * Creates new form CustomerPanelFrame
     */
    public CustomerPanel() {
        initComponents();
        loadCusData();
        showShoppingCartList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        labelEmail = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        textPhone = new javax.swing.JTextField();
        labelGender = new javax.swing.JLabel();
        radioMale = new javax.swing.JRadioButton();
        textEmail = new javax.swing.JTextField();
        radioFemale = new javax.swing.JRadioButton();
        labelBirthday = new javax.swing.JLabel();
        textBirthday = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        labelTitleProduct1 = new javax.swing.JLabel();
        comboState = new javax.swing.JComboBox<>();
        labelStreet = new javax.swing.JLabel();
        textStreet = new javax.swing.JTextField();
        labelCity = new javax.swing.JLabel();
        labelFirstName = new javax.swing.JLabel();
        textCity = new javax.swing.JTextField();
        labelLastName = new javax.swing.JLabel();
        labelState = new javax.swing.JLabel();
        textFirstName = new javax.swing.JTextField();
        labelPostcode = new javax.swing.JLabel();
        textLastName = new javax.swing.JTextField();
        textPostcode = new javax.swing.JTextField();
        labelPhone = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        labelMemberLevel = new javax.swing.JLabel();
        labelRewardPoint = new javax.swing.JLabel();
        labelVoucher = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listVoucher = new javax.swing.JList<>();
        labelLastLoginDT = new javax.swing.JLabel();
        labelRegisterDT = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        panelAdminProductList = new javax.swing.JPanel();
        labelTitleProduct = new javax.swing.JLabel();
        textSearchPro = new javax.swing.JTextField();
        tabbedPaneMall = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProList = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        tableProFoodList = new javax.swing.JTable();
        jScrollPane20 = new javax.swing.JScrollPane();
        tableProFashionList = new javax.swing.JTable();
        jScrollPane21 = new javax.swing.JScrollPane();
        tableProOtherList = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableProStationeryList = new javax.swing.JTable();
        buttonAddToCart = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        panel = new javax.swing.JPanel();
        labelSubmit1 = new javax.swing.JLabel();
        labelTotalQuantity1 = new javax.swing.JLabel();
        buttonDelete1 = new javax.swing.JButton();
        labelTotalPrice1 = new javax.swing.JLabel();
        labelTitle2 = new javax.swing.JLabel();
        buttonCheckout = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableShoppingCart = new javax.swing.JTable();
        buttonModify = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        labelTitleOrder = new javax.swing.JLabel();
        buttonPay = new javax.swing.JButton();
        buttonView = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        textSearchOrder = new javax.swing.JTextField();
        tabbedPaneOrder = new javax.swing.JTabbedPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        tableOrderAllList = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableOrderUnpaid = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableOrderToShip = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableOrderShipping = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        tableOrderCompleted = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableOrderCancelledList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setText("Customer Panel");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(681, 681, 681)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(682, 682, 682))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        tab.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabStateChanged(evt);
            }
        });

        labelEmail.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelEmail.setText("Email");

        buttonCancel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonCancel.setText("Cancel");
        buttonCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textPhone.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        textPhone.setText("+6012-3456789");
        textPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPhoneActionPerformed(evt);
            }
        });

        labelGender.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelGender.setText("Gender");

        radioMale.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        radioMale.setText("Male");
        radioMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMaleActionPerformed(evt);
            }
        });

        textEmail.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        textEmail.setText("example@gmail.com");

        radioFemale.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        radioFemale.setText("Female");

        labelBirthday.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelBirthday.setText("Birthday");

        textBirthday.setText("YYYY-MM-DD");
        textBirthday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBirthdayActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));

        labelTitleProduct1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        labelTitleProduct1.setText("Profile");
        labelTitleProduct1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitleProduct1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(labelTitleProduct1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comboState.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        comboState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Select State>", "Kuala Lumpur", "Selangor", "Putrajaya", "Labuan", "Perlis", "Kedah", "Terengganu", "Pahang", "Perak", "Kelantan", "Penang", "Selangor", "Negeri Sembilan", "Johor", "Malacca", "Sabah", "Sarawak" }));

        labelStreet.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelStreet.setText("Street");

        textStreet.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        labelCity.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelCity.setText("City");

        labelFirstName.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelFirstName.setText("First Name");

        textCity.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        labelLastName.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelLastName.setText("Last Name");

        labelState.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelState.setText("State");

        textFirstName.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        labelPostcode.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelPostcode.setText("Postcode");

        textLastName.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        textPostcode.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        textPostcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPostcodeActionPerformed(evt);
            }
        });

        labelPhone.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelPhone.setText("Phone Number");

        buttonSave.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonSave.setText("Save Changes");
        buttonSave.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        labelMemberLevel.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        labelMemberLevel.setText("Member Level");

        labelRewardPoint.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelRewardPoint.setText("Reward Point");

        labelVoucher.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelVoucher.setText("Voucher");

        listVoucher.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listVoucher);

        labelLastLoginDT.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelLastLoginDT.setText("jLabel1");

        labelRegisterDT.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelRegisterDT.setText("jLabel2");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(labelRegisterDT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelLastLoginDT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelMemberLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelRewardPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelVoucher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelMemberLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addGap(105, 105, 105)
                            .addComponent(labelRewardPoint)
                            .addGap(18, 18, 18)
                            .addComponent(labelVoucher)))
                    .addGap(0, 34, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(labelLastLoginDT)
                    .addGap(18, 18, 18)
                    .addComponent(labelRegisterDT)
                    .addGap(64, 64, 64)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(labelPostcode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelState, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelStreet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelBirthday, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelLastName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelFirstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(100, 100, 100)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(radioMale, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radioFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(textPostcode)
                        .addComponent(comboState, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textCity)
                        .addComponent(textStreet)
                        .addComponent(textEmail)
                        .addComponent(textPhone)
                        .addComponent(textBirthday)
                        .addComponent(textFirstName)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 521, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(513, 513, 513))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFirstName))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textLastName)
                            .addComponent(labelLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radioMale, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textStreet)
                            .addComponent(labelStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textCity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tab.addTab("Profile", jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        labelTitleProduct.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        labelTitleProduct.setText("Overcook Mall");
        labelTitleProduct.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        textSearchPro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textSearchPro.setText("Press enter to search");
        textSearchPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSearchProActionPerformed(evt);
            }
        });

        tabbedPaneMall.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneMallStateChanged(evt);
            }
        });

        tableProList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Price", "Model", "Stock", "Weight", "Fragile", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProList.setShowGrid(false);
        tableProList.setShowVerticalLines(true);
        jScrollPane2.setViewportView(tableProList);

        tabbedPaneMall.addTab("All", jScrollPane2);

        tableProFoodList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Price", "Model", "Stock", "Weight", "Fragile", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane19.setViewportView(tableProFoodList);

        tabbedPaneMall.addTab("Food", jScrollPane19);

        tableProFashionList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Price", "Model", "Stock", "Weight", "Fragile"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane20.setViewportView(tableProFashionList);

        tabbedPaneMall.addTab("Fashion", jScrollPane20);

        tableProOtherList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Price", "Model", "Stock", "Weight", "Fragile", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane21.setViewportView(tableProOtherList);

        tabbedPaneMall.addTab("Other", jScrollPane21);

        tableProStationeryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Price", "Model", "Stock", "Weight", "Fragile", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableProStationeryList);

        tabbedPaneMall.addTab("Stationery", jScrollPane3);

        buttonAddToCart.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonAddToCart.setText("Add To Cart");
        buttonAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToCartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAdminProductListLayout = new javax.swing.GroupLayout(panelAdminProductList);
        panelAdminProductList.setLayout(panelAdminProductListLayout);
        panelAdminProductListLayout.setHorizontalGroup(
            panelAdminProductListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdminProductListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAdminProductListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPaneMall, javax.swing.GroupLayout.DEFAULT_SIZE, 1875, Short.MAX_VALUE)
                    .addGroup(panelAdminProductListLayout.createSequentialGroup()
                        .addComponent(labelTitleProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textSearchPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelAdminProductListLayout.setVerticalGroup(
            panelAdminProductListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdminProductListLayout.createSequentialGroup()
                .addGroup(panelAdminProductListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAdminProductListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelAdminProductListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAddToCart)
                            .addComponent(textSearchPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAdminProductListLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(labelTitleProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPaneMall, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        jPanel3.add(panelAdminProductList, java.awt.BorderLayout.CENTER);

        tab.addTab("Mall", jPanel3);

        labelSubmit1.setText("jLabel1");

        labelTotalQuantity1.setText("jLabel1");

        buttonDelete1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonDelete1.setText("Delete");
        buttonDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelete1ActionPerformed(evt);
            }
        });

        labelTotalPrice1.setText("jLabel1");

        labelTitle2.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        labelTitle2.setText("Shopping Cart");
        labelTitle2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buttonCheckout.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonCheckout.setText("Checkout");
        buttonCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckoutActionPerformed(evt);
            }
        });

        tableShoppingCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Model", "Quantity", "Price", "Packing Charge"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableShoppingCart);

        buttonModify.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonModify.setText("Modify");
        buttonModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(labelTitle2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonCheckout)
                        .addGap(18, 18, 18)
                        .addComponent(buttonModify)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDelete1))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1338, Short.MAX_VALUE))
                .addGap(41, 41, 41)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelTotalQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTotalPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSubmit1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonDelete1)
                        .addComponent(buttonCheckout)
                        .addComponent(buttonModify))
                    .addComponent(labelTitle2))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(labelTotalQuantity1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(labelTotalPrice1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(labelSubmit1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addGap(135, 135, 135))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4))))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tab.addTab("Shopping Cart", jPanel9);

        labelTitleOrder.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        labelTitleOrder.setText("Order List");
        labelTitleOrder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buttonPay.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonPay.setText("Pay");
        buttonPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPayActionPerformed(evt);
            }
        });

        buttonView.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });

        buttonDelete.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        textSearchOrder.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        textSearchOrder.setText("Press enter to search");
        textSearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSearchOrderActionPerformed(evt);
            }
        });

        tabbedPaneOrder.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPaneOrder.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneOrderStateChanged(evt);
            }
        });

        tableOrderAllList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderAllList.setShowGrid(true);
        jScrollPane10.setViewportView(tableOrderAllList);

        tabbedPaneOrder.addTab("All", jScrollPane10);

        tableOrderUnpaid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderUnpaid.setShowGrid(true);
        jScrollPane11.setViewportView(tableOrderUnpaid);

        tabbedPaneOrder.addTab("Unpaid", jScrollPane11);

        tableOrderToShip.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderToShip.setShowGrid(true);
        jScrollPane12.setViewportView(tableOrderToShip);

        tabbedPaneOrder.addTab("To Ship", jScrollPane12);

        tableOrderShipping.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderShipping.setShowGrid(true);
        jScrollPane13.setViewportView(tableOrderShipping);

        tabbedPaneOrder.addTab("Shipping", jScrollPane13);

        tableOrderCompleted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderCompleted.setShowGrid(true);
        jScrollPane14.setViewportView(tableOrderCompleted);

        tabbedPaneOrder.addTab("Completed", jScrollPane14);

        tableOrderCancelledList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Shipment Code", "Status", "Date", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderCancelledList.setShowGrid(true);
        jScrollPane8.setViewportView(tableOrderCancelledList);

        tabbedPaneOrder.addTab("Cancelled", jScrollPane8);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(labelTitleOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonPay)
                        .addGap(18, 18, 18)
                        .addComponent(buttonView)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDelete))
                    .addComponent(tabbedPaneOrder))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitleOrder)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(textSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneOrder)
                .addContainerGap())
        );

        tab.addTab("Order History", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 644, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textSearchProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSearchProActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneMall.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String key = textSearchPro.getText();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        sorter.setRowFilter(RowFilter.regexFilter(".*" + Pattern.quote(key) + ".*"));
        table.setRowSorter(sorter);
    }//GEN-LAST:event_textSearchProActionPerformed

    private void tabbedPaneMallStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneMallStateChanged
        showProductList();
    }//GEN-LAST:event_tabbedPaneMallStateChanged

    private void buttonAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddToCartActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneMall.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        try {
            String proID = (table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
            AddOrderItemDialog addOrderItemDialog = new AddOrderItemDialog(null, true, Product.searchProFromID(proID));
            addOrderItemDialog.show();
            showProductList();
            showShoppingCartList();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonAddToCartActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneOrder.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        try {
            String ordID = (table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
            ViewOrderDialog viewOrderDialog = new ViewOrderDialog(null, true, Order.searchOrderFromID(ordID));
            viewOrderDialog.show();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void textPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPhoneActionPerformed

    private void radioMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioMaleActionPerformed

    private void textPostcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPostcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPostcodeActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        try {

            //            String AccountName=textAccountName.getText();
            String fname = textFirstName.getText();
            String lname = textLastName.getText();
            Gender gender;
            if (radioMale.isSelected()) {
                gender = Gender.M;
            } else if (radioFemale.isSelected()) {
                gender = Gender.F;
            } else {
                throw (new Exception("Gender is not valid! Please try again."));
            }
            LocalDate birthday = LocalDate.parse(textBirthday.getText());
            String phone = textPhone.getText();
            String email = textEmail.getText();
            String street = textStreet.getText();
            String city = textCity.getText();
            String state = (String) comboState.getSelectedItem();
            String postcode = textPostcode.getText();
            validateCustomerInput(fname, lname, phone, email, street, city, state, postcode);
            opCus.editCustomer(fname, lname, gender, birthday, phone, email, street, city, state, postcode);
            //            AccList.add(cus.getCusAccount());
            //            CusList.add(cus);
            Operation.rewriteCustomerData();
            JOptionPane.showMessageDialog(null, "Your changes is saved.");
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void tabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabStateChanged
        if (tab.getTitleAt(tab.getSelectedIndex()).contains("Mall")) {
            showProductList();
        } else if (tab.getTitleAt(tab.getSelectedIndex()).contains("Order")) {
            showOrderList();
        }
    }//GEN-LAST:event_tabStateChanged

    private void textBirthdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBirthdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBirthdayActionPerformed

    private void buttonCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckoutActionPerformed
        try {
            //DefaultTableModel model =  (DefaultTableModel)tableCusList.getModel();
            OrderConfirmationDialog orderConfirmationDialog = new OrderConfirmationDialog(null, true);
            orderConfirmationDialog.show();
            showOrderList();
            showShoppingCartList();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonCheckoutActionPerformed

    private void buttonModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModifyActionPerformed
        try {
            String oiID = (tableShoppingCart.getModel().getValueAt(tableShoppingCart.getSelectedRow(), 0).toString());
            //DefaultTableModel model =  (DefaultTableModel)tableCusList.getModel();
            ModifyOrderItemDialog modifyOrderItemDialog = new ModifyOrderItemDialog(null, true, OrderItem.searchOIFromID(oiID));
            modifyOrderItemDialog.show();
            showProductList();
            showShoppingCartList();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonModifyActionPerformed

    private void buttonDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelete1ActionPerformed
        try {
            int del = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this order item?", "Delete", JOptionPane.YES_NO_OPTION);
            if (del == 0) {
                String oiID = (tableShoppingCart.getModel().getValueAt(tableShoppingCart.getSelectedRow(), 0).toString());
                OrderItem oi = OrderItem.searchOIFromID(oiID);
                Operation.destroyOrderItem(oi);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            showProductList();
            showShoppingCartList();
        }
    }//GEN-LAST:event_buttonDelete1ActionPerformed

    private void buttonPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPayActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneOrder.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        try {
            String ordID = (table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
            Order ord = Order.searchOrderFromID(ordID);
            //DefaultTableModel model =  (DefaultTableModel)tableCusList.getModel();
            if (ord.getOrdStatus() != OrderStatus.Unpaid) {
                throw new Exception("This order does not require payment.");
            }
            PaymentDialog paymentDialog = new PaymentDialog(null, true, ord);

            paymentDialog.show();
            showOrderList();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buttonPayActionPerformed

    private void textSearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSearchOrderActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneOrder.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String key = textSearchOrder.getText();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        sorter.setRowFilter(RowFilter.regexFilter(".*" + Pattern.quote(key) + ".*"));
        table.setRowSorter(sorter);
    }//GEN-LAST:event_textSearchOrderActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        JScrollPane scrollRef = (JScrollPane) tabbedPaneOrder.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        try {
            int del = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this order?", "Delete", JOptionPane.YES_NO_OPTION);
            if (del == 0) {
                String ordID = (table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
                Order ord = Order.searchOrderFromID(ordID);
                Operation.destroyOrder(ord);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            showProductList();
            showShoppingCartList();
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void tabbedPaneOrderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneOrderStateChanged
        showOrderList();
    }//GEN-LAST:event_tabbedPaneOrderStateChanged

    /**
     * @param args the command line arguments
     */
    public void showProductList() {
        //DefaultTableModel model = new DefaultTableModel(new Object[]{"Account ID", "Account Name", "First Name","Last Name","Gender","D.O.B.","Reward Point","Phone","Email","Street","City","State","Postcode"}, 0);;
        JScrollPane scrollRef = (JScrollPane) tabbedPaneMall.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int i = 0;
        model.setRowCount(0);
        for (Product pro : ProList) {
            //https://stackoverflow.com/questions/20012772/how-to-populate-a-jtable-from-an-arraylist
            //System.out.println(cus);
            for (ProModel pm : pro.getProModels()) {
                switch (pro.getProCategory()) {
                    case Stationery:
                        if (tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("All") || tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("Stationery")) {
                            model.addRow(new Object[]{pro.getProID(), pro.getProCategory(), pro.getProName(), pro.getProPrice(), pm.getPMName(), pm.getPMStock(), pro.getProWeight(), pro.isProFragile(), Supplier.searchSupFromProID(pro.getProID()).getSupName()});
                        }
                        break;
                    case Food:
                        if (tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("All") || tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("Food")) {
                            model.addRow(new Object[]{pro.getProID(), pro.getProCategory(), pro.getProName(), pro.getProPrice(), pm.getPMName(), pm.getPMStock(), pro.getProWeight(), pro.isProFragile(), Supplier.searchSupFromProID(pro.getProID()).getSupName()});
                        }
                        break;
                    case Fashion:
                        if (tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("All") || tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("Fashion")) {
                            model.addRow(new Object[]{pro.getProID(), pro.getProCategory(), pro.getProName(), pro.getProPrice(), pm.getPMName(), pm.getPMStock(), pro.getProWeight(), pro.isProFragile(), Supplier.searchSupFromProID(pro.getProID()).getSupName()});
                        }
                        break;
                    case Other:
                        if (tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("All") || tabbedPaneMall.getTitleAt(tabbedPaneMall.getSelectedIndex()).contains("Other")) {
                            model.addRow(new Object[]{pro.getProID(), pro.getProCategory(), pro.getProName(), pro.getProPrice(), pm.getPMName(), pm.getPMStock(), pro.getProWeight(), pro.isProFragile(), Supplier.searchSupFromProID(pro.getProID()).getSupName()});
                        }
                        break;
                }

            }
        }
        table.setModel(model);

    }

    public void showOrderList() {
        //DefaultTableModel model = new DefaultTableModel(new Object[]{"Account ID", "Account Name", "First Name","Last Name","Gender","D.O.B.","Reward Point","Phone","Email","Street","City","State","Postcode"}, 0);;
        JScrollPane scrollRef = (JScrollPane) tabbedPaneOrder.getSelectedComponent();
        JTable table = (JTable) scrollRef.getViewport().getComponent(0);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int i = 0;
        model.setRowCount(0);
        //https://stackoverflow.com/questions/20012772/how-to-populate-a-jtable-from-an-arraylist
        //System.out.println(cus);
        for (Order ord : opCus.getCusOrders()) {
            switch (ord.getOrdStatus()) {
                case Unpaid:
                    if (tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("All") || tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("Unpaid")) {
                        model.addRow(new Object[]{ord.getOrdID(), ord.getOrdShipment(), ord.getOrdStatus(), ord.getOrdCreateDT(), ord.getOrdAmt()});
                    }
                    break;
                case ToShip:
                    if (tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("All") || tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("To Ship")) {
                        model.addRow(new Object[]{ord.getOrdID(), ord.getOrdShipment(), ord.getOrdStatus(), ord.getOrdCreateDT(), ord.getOrdAmt()});
                    }
                    break;
                case Shipping:
                    if (tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("All") || tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("Shipping")) {
                        model.addRow(new Object[]{ord.getOrdID(), ord.getOrdShipment(), ord.getOrdStatus(), ord.getOrdCreateDT(), ord.getOrdAmt()});
                    }
                    break;
                case Completed:
                    if (tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("All") || tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("Completed")) {
                        model.addRow(new Object[]{ord.getOrdID(), ord.getOrdShipment(), ord.getOrdStatus(), ord.getOrdCreateDT(), ord.getOrdAmt()});
                    }
                    break;
                case Cancelled:
                    if (tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("All") || tabbedPaneOrder.getTitleAt(tabbedPaneOrder.getSelectedIndex()).contains("Cancelled")) {
                        model.addRow(new Object[]{ord.getOrdID(), ord.getOrdShipment(), ord.getOrdStatus(), ord.getOrdCreateDT(), ord.getOrdAmt()});
                    }
                    break;
            }

        }
        table.setModel(model);

    }

    public void showShoppingCartList() {
        DefaultTableModel model = (DefaultTableModel) tableShoppingCart.getModel();
        int i = 0;
        model.setRowCount(0);
        for (OrderItem oi : opCus.getCusAccount().getCusSC().getOrdItems()) {
            model.addRow(new Object[]{oi.getOIID(), oi.getProCategory(), oi.getProName(), oi.getOIModel(), oi.getOIQuantity(), oi.getOIPrice(), oi.getOIPackingCharge()});
        }

        tableShoppingCart.setModel(model);

    }

    public void loadCusData() {

        try {
            textFirstName.setText(opCus.getCusPI().getPIFName());
            textLastName.setText(opCus.getCusPI().getPILName());
            if (opCus.getCusPI().getPIGender() == Gender.M) {
                radioMale.setSelected(true);
            } else if (opCus.getCusPI().getPIGender() == Gender.F) {
                radioFemale.setSelected(true);
            }
            textBirthday.setText(opCus.getCusPI().getPIDateOfBirth().toString());
            labelRewardPoint.setText("Reward Point:      " + String.valueOf(opCus.getCusPI().getPIRewardPoint()));
            labelRegisterDT.setText("Register at:       " + String.valueOf(opUser.getAccRegisterDT().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))));
            labelLastLoginDT.setText("Last Login at:     " + String.valueOf(opUser.getAccLastLoginDT().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))));
            textPhone.setText(opCus.getCusCI().getCIPhone());
            textEmail.setText(opCus.getCusCI().getCIEmail());
            textStreet.setText(opCus.getCusCI().getCIAddStreet());
            textCity.setText(opCus.getCusCI().getCIAddCity());
            comboState.setSelectedItem(opCus.getCusCI().getCIAddState());
            textPostcode.setText(opCus.getCusCI().getCIAddPostcode());
            String[] vouchers = new String[opCus.getCusPI().getPIVoucher().size()];
            for (int i = 0; i < opCus.getCusPI().getPIVoucher().size(); i++) {
                vouchers[i] = opCus.getCusPI().getPIVoucher().get(i).getVouType().name();
            }
            listVoucher.setListData(vouchers);
            if (opCus.getCusPI().getPIRewardPoint() >= 10000) {
                labelMemberLevel.setText("VVIP");
            } else if (opCus.getCusPI().getPIRewardPoint() >= 5000) {
                labelMemberLevel.setText("VIP");
            } else {
                labelMemberLevel.setText("Non-VIP");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddToCart;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCheckout;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDelete1;
    private javax.swing.JButton buttonModify;
    private javax.swing.JButton buttonPay;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonView;
    private javax.swing.JComboBox<String> comboState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelBirthday;
    private javax.swing.JLabel labelCity;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelFirstName;
    private javax.swing.JLabel labelGender;
    private javax.swing.JLabel labelLastLoginDT;
    private javax.swing.JLabel labelLastName;
    private javax.swing.JLabel labelMemberLevel;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelPostcode;
    private javax.swing.JLabel labelRegisterDT;
    private javax.swing.JLabel labelRewardPoint;
    private javax.swing.JLabel labelState;
    private javax.swing.JLabel labelStreet;
    private javax.swing.JLabel labelSubmit1;
    private javax.swing.JLabel labelTitle2;
    private javax.swing.JLabel labelTitleOrder;
    private javax.swing.JLabel labelTitleProduct;
    private javax.swing.JLabel labelTitleProduct1;
    private javax.swing.JLabel labelTotalPrice1;
    private javax.swing.JLabel labelTotalQuantity1;
    private javax.swing.JLabel labelVoucher;
    private javax.swing.JList<String> listVoucher;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelAdminProductList;
    private javax.swing.JRadioButton radioFemale;
    private javax.swing.JRadioButton radioMale;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JTabbedPane tabbedPaneMall;
    private javax.swing.JTabbedPane tabbedPaneOrder;
    private javax.swing.JTable tableOrderAllList;
    private javax.swing.JTable tableOrderCancelledList;
    private javax.swing.JTable tableOrderCompleted;
    private javax.swing.JTable tableOrderShipping;
    private javax.swing.JTable tableOrderToShip;
    private javax.swing.JTable tableOrderUnpaid;
    private javax.swing.JTable tableProFashionList;
    private javax.swing.JTable tableProFoodList;
    private javax.swing.JTable tableProList;
    private javax.swing.JTable tableProOtherList;
    private javax.swing.JTable tableProStationeryList;
    private javax.swing.JTable tableShoppingCart;
    private javax.swing.JTextField textBirthday;
    private javax.swing.JTextField textCity;
    private javax.swing.JTextField textEmail;
    private javax.swing.JTextField textFirstName;
    private javax.swing.JTextField textLastName;
    private javax.swing.JTextField textPhone;
    private javax.swing.JTextField textPostcode;
    private javax.swing.JTextField textSearchOrder;
    private javax.swing.JTextField textSearchPro;
    private javax.swing.JTextField textStreet;
    // End of variables declaration//GEN-END:variables
}
